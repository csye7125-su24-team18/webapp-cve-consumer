package main

import (
	"context"
	"database/sql"
	"encoding/json"
	"log"
	"os"
	"reflect"

	_ "github.com/lib/pq"
	"github.com/segmentio/kafka-go"
)

const (
	topic         = "cve"
	brokerAddress = "localhost:9092"
)

var dbConnStr = os.Getenv("DATABASE_URL")
var db *sql.DB

func main() {
	var err error

	// Open the database connection
	db, err = sql.Open("postgres", dbConnStr)
	if err != nil {
		log.Fatalf("Failed to open database connection: %v", err)
		return
	}
	defer db.Close()

	// Start Kafka consumer
	go consumeKafkaMessages()

	// Block the main thread
	select {}
}

func consumeKafkaMessages() {
	r := kafka.NewReader(kafka.ReaderConfig{
		Brokers:   []string{brokerAddress},
		Topic:     topic,
		Partition: 0,
		MinBytes:  10e3, // 10KB
		MaxBytes:  10e6, // 10MB
	})

	for {
		m, err := r.ReadMessage(context.Background())
		if err != nil {
			log.Printf("Error reading message: %v", err)
			continue
		}

		var cveJson map[string]interface{}
		err = json.Unmarshal(m.Value, &cveJson)
		if err != nil {
			log.Printf("Failed to unmarshal message: %v", err)
			continue
		}

		cveMetadata, ok := cveJson["cveMetadata"].(map[string]interface{})
		if !ok {
			log.Println("Invalid CVE metadata")
			continue
		}

		cveId, ok := cveMetadata["cveId"].(string)
		if !ok {
			log.Println("Invalid CVE ID")
			continue
		}

		version := getCveVersion(cveMetadata)
		if version != 0 {
			err = insertCVE(db, cveId, cveJson, version)
			if err != nil {
				log.Printf("Failed to insert CVE %s: %v", cveId, err)
			}
		} else {
			log.Printf("Skipping CVE %s as duplicate", cveId)
		}
	}
}

func getCveVersion(cveMetadata map[string]interface{}) int {
	var version = 0
	var cveId = cveMetadata["cveId"].(string)
	query := `SELECT json_data->'cveMetadata', version FROM cve.cve_records WHERE cve_id = $1 ORDER BY version DESC LIMIT 1;`
	row := db.QueryRow(query, cveId)
	var cveMetadataDB string
	var cveMetadataDBMap map[string]interface{}
	var versionDB int
	err := row.Scan(&cveMetadataDB, &versionDB)
	if err != nil && err != sql.ErrNoRows {
		log.Printf("Error querying database: %v", err)
		return 0
	}

	json.Unmarshal([]byte(cveMetadataDB), &cveMetadataDBMap)
	if !reflect.DeepEqual(cveMetadataDBMap, cveMetadata) {
		version = versionDB + 1
		log.Printf("New version found for CVE %s: %d", cveId, version)
	}
	return version
}

func insertCVE(db *sql.DB, cveId string, cve map[string]interface{}, version int) error {
	query := `
	INSERT INTO cve.cve_records (cve_id, json_data, version)
	VALUES ($1, $2, $3)
	ON CONFLICT (cve_id, version) DO NOTHING;
	`
	cveJSON, _ := json.Marshal(cve)
	_, err := db.Exec(query, cveId, cveJSON, version)
	return err
}
